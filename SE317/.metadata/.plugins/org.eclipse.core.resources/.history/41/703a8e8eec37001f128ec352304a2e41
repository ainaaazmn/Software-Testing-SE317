package lab7;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Stack;

public class CalculatorApp extends JFrame implements ActionListener {
    private JTextField display;
    private double memory = 0;
    private StringBuilder currentInput = new StringBuilder();
    private Stack<String> operations = new Stack<>();

    public CalculatorApp() {
        // Set up the frame
        setTitle("Scientific Calculator");
        setSize(400, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Set up the display
        display = new JTextField();
        display.setEditable(false);
        display.setFont(new Font("Arial", Font.PLAIN, 24));
        add(display, BorderLayout.NORTH);

        // Set up the panel with buttons
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(6, 4));
        addButtons(panel);
        add(panel, BorderLayout.CENTER);

        setVisible(true);
    }

    private void addButtons(JPanel panel) {
        String[] buttons = {
            "7", "8", "9", "/", 
            "4", "5", "6", "*", 
            "1", "2", "3", "-", 
            "0", ".", "=", "+", 
            "C", "sqrt", "^2", "M+", 
            "M-", "MR", "MC", "Del"
        };

        for (String text : buttons) {
            JButton button = new JButton(text);
            button.addActionListener(this);
            panel.add(button);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        switch (command) {
            case "C":
                clearDisplay();
                break;
            case "Del":
                deleteLastCharacter();
                break;
            case "=":
                calculateResult();
                break;
            case "sqrt":
                calculateSquareRoot();
                break;
            case "^2":
                calculateSquare();
                break;
            case "M+":
                addToMemory();
                break;
            case "M-":
                subtractFromMemory();
                break;
            case "MR":
                recallMemory();
                break;
            case "MC":
                clearMemory();
                break;
            default:
                appendToDisplay(command);
                break;
        }
    }

    private void clearDisplay() {
        currentInput.setLength(0);
        display.setText("");
    }

    private void deleteLastCharacter() {
        int length = currentInput.length();
        if (length > 0) {
            currentInput.setLength(length - 1);
            display.setText(currentInput.toString());
        }
    }

    private void calculateResult() {
        try {
            double result = evaluate(currentInput.toString());
            display.setText(String.valueOf(result));
            currentInput.setLength(0);
            currentInput.append(result);
        } catch (Exception ex) {
            display.setText("Error");
        }
    }

    private void calculateSquareRoot() {
        try {
            double value = Double.parseDouble(currentInput.toString());
            double result = Math.sqrt(value);
            display.setText(String.valueOf(result));
            currentInput.setLength(0);
            currentInput.append(result);
        } catch (NumberFormatException ex) {
            display.setText("Error");
        }
    }

    private void calculateSquare() {
        try {
            double value = Double.parseDouble(currentInput.toString());
            double result = Math.pow(value, 2);
            display.setText(String.valueOf(result));
            currentInput.setLength(0);
            currentInput.append(result);
        } catch (NumberFormatException ex) {
            display.setText("Error");
        }
    }

    private void addToMemory() {
        try {
            memory += Double.parseDouble(currentInput.toString());
        } catch (NumberFormatException ex) {
            display.setText("Error");
        }
    }

    private void subtractFromMemory() {
        try {
            memory -= Double.parseDouble(currentInput.toString());
        } catch (NumberFormatException ex) {
            display.setText("Error");
        }
    }

    private void recallMemory() {
        display.setText(String.valueOf(memory));
        currentInput.setLength(0);
        currentInput.append(memory);
    }

    private void clearMemory() {
        memory = 0;
    }

    private void appendToDisplay(String value) {
        currentInput.append(value);
        display.setText(currentInput.toString());
    }

    private double evaluate(String expression) {
        char[] tokens = expression.toCharArray();
        Stack<Double> values = new Stack<>();
        Stack<Character> ops = new Stack<>();

        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i] == ' ') continue;

            if (tokens[i] >= '0' && tokens[i] <= '9') {
                StringBuilder buffer = new StringBuilder();
                while (i < tokens.length && (tokens[i] >= '0' && tokens[i] <= '9' || tokens[i] == '.')) {
                    buffer.append(tokens[i++]);
                }
                values.push(Double.parseDouble(buffer.toString()));
                i--;
            } else if (tokens[i] == '(') {
                ops.push(tokens[i]);
            } else if (tokens[i] == ')') {
                while (ops.peek() != '(') values.push(applyOp(ops.pop(), values.pop(), values.pop()));
                ops.pop();
            } else if (tokens[i] == '+' || tokens[i] == '-' || tokens[i] == '*' || tokens[i] == '/') {
                while (!ops.isEmpty() && hasPrecedence(tokens[i], ops.peek())) {
                    values.push(applyOp(ops.pop(), values.pop(), values.pop()));
                }
                ops.push(tokens[i]);
            }
        }

        while (!ops.isEmpty()) values.push(applyOp(ops.pop(), values.pop(), values.pop()));

        return values.pop();
    }

    private boolean hasPrecedence(char op1, char op2) {
        if (op2 == '(' || op2 == ')') return false;
        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;
        return true;
    }

    private double applyOp(char op, double b, double a) {
        switch (op) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            case '/':
                if (b == 0) throw new UnsupportedOperationException("Cannot divide by zero");
                return a / b;
        }
        return 0;
    }

    public static void main(String[] args) {
        new CalculatorApp();
    }
}

